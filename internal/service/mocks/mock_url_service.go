// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/hairutdin/url-shortener/internal/models"
)

// MockIURLService is a mock of IURLService interface.
type MockIURLService struct {
	ctrl     *gomock.Controller
	recorder *MockIURLServiceMockRecorder
}

// MockIURLServiceMockRecorder is the mock recorder for MockIURLService.
type MockIURLServiceMockRecorder struct {
	mock *MockIURLService
}

// NewMockIURLService creates a new mock instance.
func NewMockIURLService(ctrl *gomock.Controller) *MockIURLService {
	mock := &MockIURLService{ctrl: ctrl}
	mock.recorder = &MockIURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLService) EXPECT() *MockIURLServiceMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockIURLService) CreateShortURL(shortURL, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", shortURL, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockIURLServiceMockRecorder) CreateShortURL(shortURL, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockIURLService)(nil).CreateShortURL), shortURL, originalURL)
}

// GetBaseURL mocks base method.
func (m *MockIURLService) GetBaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockIURLServiceMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockIURLService)(nil).GetBaseURL))
}

// GetOriginalURL mocks base method.
func (m *MockIURLService) GetOriginalURL(shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockIURLServiceMockRecorder) GetOriginalURL(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockIURLService)(nil).GetOriginalURL), shortURL)
}

// Ping mocks base method.
func (m *MockIURLService) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIURLServiceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIURLService)(nil).Ping))
}

// ShortenBatchURLs mocks base method.
func (m *MockIURLService) ShortenBatchURLs(requests []models.BatchShortenRequest) ([]models.BatchShortenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenBatchURLs", requests)
	ret0, _ := ret[0].([]models.BatchShortenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenBatchURLs indicates an expected call of ShortenBatchURLs.
func (mr *MockIURLServiceMockRecorder) ShortenBatchURLs(requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenBatchURLs", reflect.TypeOf((*MockIURLService)(nil).ShortenBatchURLs), requests)
}

// ShortenURL mocks base method.
func (m *MockIURLService) ShortenURL(originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURL", originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURL indicates an expected call of ShortenURL.
func (mr *MockIURLServiceMockRecorder) ShortenURL(originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURL", reflect.TypeOf((*MockIURLService)(nil).ShortenURL), originalURL)
}
